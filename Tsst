-- tailor_scanner_to_folder.lua
-- Scans getgc() for "activateTailorTable" and numeric candidates,
-- then writes results into workspace.TailorNumbersTxt as StringValue children.

local function safe_pcall(f, ...)
    local ok, a, b, c, d = pcall(f, ...)
    return ok, {a,b,c,d}
end

local foundNumbers = {}   -- map num -> true
local foundDetails = {}   -- map num -> { details... }

local function addCandidate(n, where)
    if type(n) ~= "number" then return end
    if n <= 0 or n > 10000 then return end -- filter obviously unrelated huge numbers
    n = math.floor(n) -- ensure integer
    if not foundNumbers[n] then
        foundNumbers[n] = true
        foundDetails[n] = {}
    end
    table.insert(foundDetails[n], tostring(where))
end

local function inspectFunction(fn, idx)
    if type(fn) ~= "function" then return end
    local info = nil
    local ok, res = safe_pcall(function() return debug.getinfo(fn, "S") end)
    if ok and res[1] then info = res[1] end
    local src = (info and info.source) and tostring(info.source) or ("<func gc idx "..tostring(idx)..">")

    -- constants
    ok, res = safe_pcall(function() return debug.getconstants(fn) end)
    if ok and type(res[1]) == "table" then
        for i, c in ipairs(res[1]) do
            if type(c) == "string" and c:find("activateTailorTable", 1, true) then
                -- when we find the key string, add nearby numeric constants
                addCandidate(nil, ("string 'activateTailorTable' found in constants idx %d of %s"):format(i, src))
                for _, cc in ipairs(res[1]) do
                    if type(cc) == "number" then addCandidate(cc, ("constant near string in %s"):format(src)) end
                    if type(cc) == "string" and tonumber(cc) then addCandidate(tonumber(cc), ("numeric-string constant near string in %s"):format(src)) end
                end
            elseif type(c) == "number" then
                addCandidate(c, ("constant number in %s"):format(src))
            elseif type(c) == "string" and tonumber(c) then
                addCandidate(tonumber(c), ("constant numeric-string in %s"):format(src))
            end
        end
    end

    -- upvalues
    ok, res = safe_pcall(function() return debug.getupvalues(fn) end)
    if ok and type(res[1]) == "table" then
        for name, value in pairs(res[1]) do
            if type(value) == "string" and value:find("activateTailorTable", 1, true) then
                addCandidate(nil, ("upvalue '%s' contains 'activateTailorTable' in %s"):format(tostring(name), src))
            elseif type(value) == "number" then
                addCandidate(value, ("upvalue '%s' number in %s"):format(tostring(name), src))
            elseif type(value) == "string" and tonumber(value) then
                addCandidate(tonumber(value), ("upvalue '%s' numeric-string in %s"):format(tostring(name), src))
            end
        end
    end
end

local function scanGetGC()
    foundNumbers = {}
    foundDetails = {}

    local gc = nil
    local ok, res = safe_pcall(function() return getgc() end)
    if not ok or type(res[1]) ~= "table" then
        warn("getgc() not available in this executor. Aborting scan.")
        return {}
    end
    gc = res[1]

    for i, v in ipairs(gc) do
        local t = type(v)
        if t == "function" then
            pcall(inspectFunction, v, i)
        elseif t == "table" then
            -- scan table entries for the target string / numbers
            for k2, v2 in pairs(v) do
                if type(v2) == "string" and v2:find("activateTailorTable", 1, true) then
                    addCandidate(nil, ("found 'activateTailorTable' string in table gc[%d]"):format(i))
                    for kk, vv in pairs(v) do
                        if type(vv) == "number" then addCandidate(vv, ("table value in gc[%d]"):format(i)) end
                        if type(vv) == "string" and tonumber(vv) then addCandidate(tonumber(vv), ("table numeric-string in gc[%d]"):format(i)) end
                    end
                elseif type(v2) == "number" then
                    addCandidate(v2, ("table number in gc[%d]"):format(i))
                elseif type(v2) == "string" and tonumber(v2) then
                    addCandidate(tonumber(v2), ("table numeric-string in gc[%d]"):format(i))
                end
            end
        elseif t == "string" then
            if v:find("activateTailorTable", 1, true) then
                addCandidate(nil, ("standalone string 'activateTailorTable' in gc[%d]"):format(i))
            elseif tonumber(v) then
                addCandidate(tonumber(v), ("standalone numeric-string in gc[%d]"):format(i))
            end
        end
    end

    -- build sorted candidate list
    local candidates = {}
    for k, _ in pairs(foundNumbers) do
        table.insert(candidates, k)
    end
    table.sort(candidates)
    return candidates
end

local function writeResultsToFolder(candidates)
    if not candidates then candidates = {} end

    local targetFolder = workspace:FindFirstChild("TailorNumbersTxt")
    if not targetFolder then
        targetFolder = Instance.new("Folder")
        targetFolder.Name = "TailorNumbersTxt"
        targetFolder.Parent = workspace
    end

    -- clear old contents
    for _, child in ipairs(targetFolder:GetChildren()) do
        child:Destroy()
    end

    -- create numbers.txt StringValue containing CSV list
    local numbersTxt = Instance.new("StringValue")
    numbersTxt.Name = "numbers.txt"
    numbersTxt.Value = table.concat(candidates, ",")
    numbersTxt.Parent = targetFolder

    -- create a file for each candidate with details
    for _, n in ipairs(candidates) do
        local sv = Instance.new("StringValue")
        sv.Name = ("candidate_%d.txt"):format(n)
        local detailsTbl = foundDetails[n] or {}
        sv.Value = ("Number: %d\nFound at:\n%s"):format(n, table.concat(detailsTbl, "\n"))
        sv.Parent = targetFolder
    end

    -- also create a small metadata file
    local meta = Instance.new("StringValue")
    meta.Name = "README.txt"
    meta.Value = "This folder contains candidate numbers for activateTailorTable. Use numbers.txt or the candidate_*.txt files."
    meta.Parent = targetFolder

    print(("Wrote %d candidate(s) to workspace.TailorNumbersTxt"):format(#candidates))
end

-- Run initial scan + write
local candidates = scanGetGC()
writeResultsToFolder(candidates)

-- helpers
_G.RefreshTailorScan = function()
    local c = scanGetGC()
    writeResultsToFolder(c)
    return c
end

_G.GetTailorCandidates = function()
    return scanGetGC()
end

print("Done. Check the workspace.TailorNumbersTxt folder. Use _G.RefreshTailorScan() to rescan/overwrite.")
